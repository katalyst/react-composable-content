{"version":3,"file":"main.1e712138af7577d788ec.bundle.js","sources":["webpack:///./stories/react-components/integration.jsx"],"sourcesContent":["import React from 'react';\nimport ComposableContent, { sectionifier } from '../../src/index';\nimport * as icons from '../../src/icons';\n\nexport default class IntegrationExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: {},\n    }\n  }\n\n  updateContent = content => {\n    if(this.props.sections) {\n      this.setState({ content: sectionifier(content) });\n    } else {\n      this.setState({ content });\n    }\n  }\n\n  render(){\n    const components = [];\n\n    if(this.props.sections) {\n      components.push({\n        name: \"section\",\n        label: \"Section\",\n        icon: \"section\",\n        fields: [{\n          name: \"section_type\",\n          type: \"select\",\n          data: [\"full-width\", \"container\", \"callout\"],\n        }]\n      })\n    }\n    \n    components.push({\n      name: \"example_component\",\n      label: \"Example Component\",\n      fields: [{\n        name: \"string\",\n        label: \"String field\",\n      }]\n    });\n\n    return(\n      <div>\n        <ComposableContent\n          components={components}\n          onCompositionChange={content => this.updateContent(content)}\n          draftMode={true}\n          icons={icons}\n        />\n        <h2>Output</h2>\n        <p>This is an external <code>pre</code> tag that gets populated with the JSON data when it changes:</p>\n        <pre>{JSON.stringify(this.state.content, null, 2)}</pre>\n      </div>\n    )\n  }\n}"],"mappings":"AAqDA","sourceRoot":""}